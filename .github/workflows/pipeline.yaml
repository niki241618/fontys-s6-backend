name: Run Controller Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./Services  # Set global working directory for all run commands

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: '6.0'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Publish
      run: dotnet publish -c Release -o out

    - name: Run tests
      run: dotnet test --no-build

  zap_scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Create .env file
      run: |
        cat << EOF > .env
        ConnectionStrings__DatabaseConnection="Server=db;Port=3306;Database=audiobooks;Uid=root;Pwd=password;"
        AzureBlobStorage__ConnectionString=${{ secrets.AZUREBLOBSTORAGE__CONNECTIONSTRING }}
        SeedDatabase="true"
        EOF

    - name: Build Docker Images with Specific Names
      working-directory: ./Services
      run: |
        docker build -t niki241618/book-info-service -f ./Dockerfile.bookinfo .
        docker build -t niki241618/book-streaming-service -f ./Dockerfile.bookstream .
        docker build -t niki241618/logging-service -f ./Dockerfile.logger .
    
    - name: Start Docker Compose services
      run: docker-compose -f docker-compose.zap.yaml up -d

    - name: Create ZAP rules file
      run: |
        mkdir -p .zap
        cat << EOF > .zap/rules.tsv
        10049	IGNORE	(Storable and Cacheable Content)
        10021	IGNORE	(X-Content-Type-Options Header Missing)
        10048	IGNORE	(Incomplete or No Cache-control and Pragma HTTP Header Set)
        10075	IGNORE	(Cookie Without SameSite Attribute)
        EOF

    - name: ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        target: "http://localhost:8080/api/"
        rules_file_name: '.zap/rules.tsv'
      env:
        GITHUB_WORKSPACE: ${{ github.workspace }}
        GITHUB_ACTION: zap

    - name: Stop Docker Compose services
      run: docker-compose -f docker-compose.zap.yaml down
 
  deploy-docker:
    runs-on: ubuntu-latest
    needs: zap_scan
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    steps:
    - name: Check out the repo
      uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
      with:
        username: niki241618
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker Images with Specific Names
      working-directory: ./Services
      run: |
        docker build -t niki241618/book-info-service -f ./Dockerfile.bookinfo .
        docker build -t niki241618/book-streaming-service -f ./Dockerfile.bookstream .
        docker build -t niki241618/logging-service -f ./Dockerfile.logger .
        docker build -t niki241618/users-service -f ./Dockerfile.usersservice .

    - name: Push the Docker image
      run: | 
        docker push niki241618/book-info-service
        docker push niki241618/book-streaming-service
        docker push niki241618/logging-service
        docker push niki241618/users-service
        
  deploy-gke:
    runs-on: ubuntu-latest
    needs: zap_scan
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write

    steps:
    - name: Check out the repo
      uses: actions/checkout@v4

    - name: Install Google Cloud CLI
      uses: google-github-actions/setup-gcloud@0
      with:
        project_id: astral-option-427116-t2
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        install_components: 'gke-gcloud-auth-plugin'
        export_default_credentials: true

    - name: Build and Push
      working-directory: ./Services
      env:
        GOOGLE_PROJECT: astral-option-427116-t2
      run: |
        gcloud auth configure-docker eu-west4-docker.pkg.dev
        docker build -t europe-west4-docker.pkg.dev/astral-option-427116-t2/audio-oasis-test/book-info-service -f ./Dockerfile.bookinfo .
        docker push europe-west4-docker.pkg.dev/astral-option-427116-t2/audio-oasis-test/book-info-service
        docker build -t europe-west4-docker.pkg.dev/astral-option-427116-t2/audio-oasis-test/book-streaming-service -f ./Dockerfile.bookstream .
        docker push europe-west4-docker.pkg.dev/astral-option-427116-t2/audio-oasis-test/book-streaming-service
        docker build -t europe-west4-docker.pkg.dev/astral-option-427116-t2/audio-oasis-test/logging-service -f ./Dockerfile.logger .
        docker push europe-west4-docker.pkg.dev/astral-option-427116-t2/audio-oasis-test/logging-service
        docker build -t europe-west4-docker.pkg.dev/astral-option-427116-t2/audio-oasis-test/users-service -f ./Dockerfile.usersservice .
        docker push europe-west4-docker.pkg.dev/astral-option-427116-t2/audio-oasis-test/users-service

    - name: Deploy to GKE
      working-directory: ./K8S/GKE
      env:
        GOOGLE_PROJECT: astral-option-427116-t2
      run: |
        gcloud container clusters get-credentials audio-oasis-test --region europe-west4
        kubectl apply -f book-info-depl.yaml
        kubectl apply -f logging-depl.yaml
        kubectl apply -f rabbitmq-depl.yaml
        kubectl apply -f streaming-depl.yaml
        kubectl apply -f usersService-depl.yaml
        kubectl apply -f cert-manager.yaml
        kubectl apply -f ingress-depl.yaml
        
